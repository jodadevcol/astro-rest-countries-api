---
import { SELECT_REGIONS } from "@const/filters"
import ArrowIcon from "@icons/Arrow.astro"
import SearchIcon from "@icons/Search.astro"
---

<div class="relative z-10 flex items-center justify-between">
	<div class="input-country w-full max-w-md">
		<div
			class="flex items-center justify-start gap-x-6 rounded-md bg-white px-8 py-4 text-light-100 dark:bg-dark-100 dark:text-white"
			style="filter: drop-shadow(0px 2px 12px rgba(0, 0, 0, 0.05));"
		>
			<span class="icon-search size-5">
				<SearchIcon />
			</span>

			<input
				data-input="search"
				type="text"
				placeholder="Search for a country..."
				class="imelilig w-full max-w-full appearance-none border-none bg-inherit outline-none dark:text-white dark:placeholder-white"
			/>
		</div>
	</div>

	<div class="selector-region relative w-full max-w-52">
		<button
			class="text-light-100-100 flex w-full max-w-full items-center justify-between rounded-md bg-white px-6 py-4 text-left dark:bg-dark-100 dark:text-white"
			style="filter: drop-shadow(0px 2px 12px rgba(0, 0, 0, 0.05));"
			data-filter-select="region"
		>
			<span class="text-base" data-filter-select-name="">Filter by Region</span>

			<span class="icon-arrow-down size-3">
				<ArrowIcon />
			</span>
		</button>

		<div
			class="absolute -bottom-1 left-0 right-0 hidden w-full max-w-full translate-y-full opacity-0"
		>
			<ul
				class="rounded-md bg-white text-light-100 dark:bg-dark-100 dark:text-white"
				style="filter: drop-shadow(0px 2px 12px rgba(0, 0, 0, 0.05));"
			>
				{
					SELECT_REGIONS.map((region) => {
						return (
							<li class="w-full max-w-full px-6 py-2 transition-colors duration-300 ease-in-out first:pt-4 last:pb-4 hover:bg-dark-200/40">
								<button
									class="hover: w-full text-left"
									data-filter-select={`region-${region.value}`}
								>
									<span class="pointer-events-none text-sm">{region.name}</span>
								</button>
							</li>
						)
					})
				}
			</ul>
		</div>
	</div>
</div>

<script>
	import { SELECT_REGIONS } from "@const/filters"
	import { $, $$ } from "@tools/dom"
	import { setParamsURL } from "@tools/url"
	import debounce from "just-debounce-it"

	// this needs to use a ViewTransition to working properly
	document.addEventListener("astro:page-load", () => {
		const params = new URLSearchParams(window.location.search)
		const debouncedFilter = debounce(filterCountriesBy, 500)
		const debouncedParams = debounce(updateParams, 300)

		const selectRegion = $("[data-filter-select='region']")
		const choicesRegion = $$("[data-filter-select^='region-']")
		const inputSearch = $("[data-input='search']") as HTMLInputElement

		if (selectRegion) selectRegion.addEventListener("click", toogleRegion)

		if (choicesRegion) {
			choicesRegion.forEach((choice) => {
				choice.addEventListener("click", (event) => handleClickRegionChoice(event, choice))
			})
		}

		if (inputSearch) {
			inputSearch.addEventListener("input", () => {
				debouncedParams({ search: inputSearch.value })
				debouncedFilter()
			})
		}

		function toogleRegion(event: MouseEvent) {
			event.preventDefault()
			const selectRegionsBox = selectRegion?.nextElementSibling

			selectRegionsBox?.classList.toggle("hidden")
			selectRegionsBox?.classList.toggle("opacity-0")
		}

		function handleClickRegionChoice(event: MouseEvent, choice: HTMLElement) {
			event.preventDefault()

			const hasValueToChoice = choice.dataset.filterSelect
			const value = hasValueToChoice?.split("-")[1] || ""

			// updateParams({ region: value })
			setNameRegion({ value })
			debouncedParams({ region: value })
			debouncedFilter()

			// close the region selector
			selectRegion?.click()
		}

		function setNameRegion({ value }: { value: string }) {
			const $nameRegion = $("[data-filter-select-name]", selectRegion || document)
			if (!$nameRegion) return

			const newName = SELECT_REGIONS.find((region) => region.value === value)?.name
			$nameRegion.textContent = newName || "Filter by Region"
		}

		function updateParams({ region, search }: { region?: string; search?: string } = {}) {
			if (search !== undefined) {
				setParamsURL({ params, values: { search: search?.toLocaleLowerCase().trim() } })
			} else if (params.has("search")) {
				setParamsURL({ params, values: { search: params.get("search") || "" } })
			}

			if (region !== undefined) {
				setParamsURL({ params, values: { region: region?.toLocaleLowerCase().trim() } })
			} else if (params.has("region")) {
				setParamsURL({ params, values: { region: params.get("region") || "" } })
			}
		}

		function filterCountriesBy() {
			const countries = $$("[data-country-name]")
			const querySearch = params.get("search")?.toLowerCase() || ""
			const queryRegion = params.get("region")?.toLowerCase() || ""

			countries?.forEach((country) => {
				const name = country.dataset.countryName || ""
				const regionCountry = country.dataset.countryRegion || ""

				const isName = params.has("search") ? name.toLowerCase().includes(querySearch) : true
				const isRegion = params.has("region")
					? queryRegion === "all" || regionCountry.toLowerCase().includes(queryRegion)
					: true

				country.classList.toggle("hidden", !(isName && isRegion))
			})
		}
	})
</script>
