---
import { SELECT_REGIONS } from "../const/filters"
---

<div class="relative z-10 flex items-center justify-between">
	<div class="input-country w-full max-w-md">
		<div
			class="flex items-center justify-start gap-x-6 rounded-md bg-white px-8 py-4 text-light-100 dark:bg-dark-100 dark:text-white"
			style="filter: drop-shadow(0px 2px 12px rgba(0, 0, 0, 0.05));"
		>
			<span class="icon-search size-5">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					stroke-width="1.5"
					stroke="currentColor"
					class="size-full"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"
					></path>
				</svg>
			</span>

			<input
				type="text"
				placeholder="Search for a country..."
				class="imelilig w-full max-w-full appearance-none border-none bg-inherit outline-none dark:text-white dark:placeholder-white"
			/>
		</div>
	</div>

	<div class="selector-region relative w-full max-w-52">
		<button
			class="text-light-100-100 flex w-full max-w-full items-center justify-between rounded-md bg-white px-6 py-4 text-left dark:bg-dark-100 dark:text-white"
			style="filter: drop-shadow(0px 2px 12px rgba(0, 0, 0, 0.05));"
			data-click-event="click/regionSelector"
		>
			<span class="text-base" data-select-name="">Filter by Region</span>

			<span class="icon-arrow-down size-3">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					stroke-width="1.5"
					stroke="currentColor"
					class="size-full"
				>
					<path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5"
					></path>
				</svg>
			</span>
		</button>

		<div
			class="absolute -bottom-1 left-0 right-0 hidden w-full max-w-full translate-y-full opacity-0"
		>
			<ul
				class="space-y-2 rounded-md bg-white px-6 py-4 text-light-100 dark:bg-dark-100 dark:text-white"
				style="filter: drop-shadow(0px 2px 12px rgba(0, 0, 0, 0.05));"
			>
				{
					SELECT_REGIONS.map((region) => {
						return (
							<li>
								<button data-click-event={`value/region-${region.value}`}>
									<span class="pointer-events-none text-sm">{region.name}</span>
								</button>
							</li>
						)
					})
				}
			</ul>
		</div>
	</div>
</div>

<script>
	import { SELECT_REGIONS } from "../const/filters"
	// this needs to use a ViewTransition to working properly
	// document.addEventListener("astro:page-load", () => {
	// })

	function setNameSelect({ select, value }: { select: HTMLElement; value: string }) {
		if (!select) return

		const selectName = select.querySelector("[data-select-name]")
		if (!selectName) return

		const newValue = SELECT_REGIONS.find((region) => region.value === value)?.name
		const newName = newValue ? newValue : "Filter by Region"

		selectName.textContent = newName
	}

	const objURL = new URL(window.location.origin)

	const selectRegion = document.querySelector(
		"[data-click-event='click/regionSelector']"
	) as HTMLElement
	if (!selectRegion) console.error("Region selector not found")

	selectRegion?.addEventListener("click", (event) => {
		event.preventDefault()
		const selectRegionsBox = selectRegion.nextElementSibling

		selectRegionsBox?.classList.toggle("hidden")
		selectRegionsBox?.classList.toggle("opacity-0")
	})

	const choicesRegion = document.querySelectorAll(
		"[data-click-event^='value/region-']"
	) as NodeListOf<HTMLElement>
	if (!choicesRegion) console.error("Region options not found")

	choicesRegion?.forEach((choice) => {
		choice.addEventListener("click", (event) => {
			event.preventDefault()

			const hasValueChoice = choice.dataset.clickEvent
			const regionValue = hasValueChoice ? hasValueChoice.split("/")[1] : false
			const paramQuery = regionValue ? regionValue.split("-")[1] : ""

			objURL.searchParams.set("r", paramQuery)
			window.history.replaceState(null, "", objURL.toString())

			// close the region selector
			selectRegion?.click()

			// set the region name in the selector
			setNameSelect({ select: selectRegion, value: paramQuery })
		})
	})
</script>
